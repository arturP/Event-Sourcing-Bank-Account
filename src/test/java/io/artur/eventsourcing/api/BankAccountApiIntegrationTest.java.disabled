package io.artur.eventsourcing.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.artur.eventsourcing.EventSourcingBankAccountApplication;
import io.artur.eventsourcing.api.dto.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import java.math.BigDecimal;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

// @SpringBootTest(classes = EventSourcingBankAccountApplication.class)
// @AutoConfigureMockMvc
// @ActiveProfiles("test")
class BankAccountApiIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    private String jwtToken;

    @BeforeEach
    void setUp() throws Exception {
        // Login to get JWT token
        LoginRequest loginRequest = new LoginRequest("demo", "demo123");
        
        String response = mockMvc.perform(post("/api/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();

        AuthResponse authResponse = objectMapper.readValue(response, AuthResponse.class);
        jwtToken = authResponse.getToken();
    }

    // @Test
    void testHealthEndpoint() throws Exception {
        mockMvc.perform(get("/api/health"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.status").value("UP"))
                .andExpect(jsonPath("$.service").value("Event Sourcing Bank Account API"));
    }

    @Test
    void testAuthenticationFlow() throws Exception {
        // Test login with valid credentials
        LoginRequest loginRequest = new LoginRequest("admin", "admin123");
        
        mockMvc.perform(post("/api/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(loginRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.token").isNotEmpty())
                .andExpect(jsonPath("$.username").value("admin"));

        // Test login with invalid credentials
        LoginRequest invalidLogin = new LoginRequest("invalid", "invalid");
        
        mockMvc.perform(post("/api/auth/login")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidLogin)))
                .andExpect(status().isBadRequest());
    }

    @Test
    void testCreateAccountEndpoint() throws Exception {
        CreateAccountRequest request = new CreateAccountRequest(
            "John Doe",
            new BigDecimal("1000.00"),
            new BigDecimal("500.00")
        );

        mockMvc.perform(post("/api/accounts")
                .header("Authorization", "Bearer " + jwtToken)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.accountHolder").value("John Doe"))
                .andExpect(jsonPath("$.balance").value(1000.00))
                .andExpect(jsonPath("$.overdraftLimit").value(500.00))
                .andExpect(jsonPath("$.accountId").isNotEmpty());
    }

    @Test
    void testCreateAccountValidation() throws Exception {
        // Test with invalid data
        CreateAccountRequest invalidRequest = new CreateAccountRequest(
            "", // Empty name
            new BigDecimal("-100"), // Negative balance
            new BigDecimal("20000") // Overdraft limit too high
        );

        mockMvc.perform(post("/api/accounts")
                .header("Authorization", "Bearer " + jwtToken)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(invalidRequest)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.code").value("VALIDATION_FAILED"));
    }

    @Test
    void testDepositAndWithdrawFlow() throws Exception {
        // Create account
        CreateAccountRequest createRequest = new CreateAccountRequest(
            "Jane Smith",
            new BigDecimal("500.00"),
            new BigDecimal("100.00")
        );

        String createResponse = mockMvc.perform(post("/api/accounts")
                .header("Authorization", "Bearer " + jwtToken)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(createRequest)))
                .andExpect(status().isCreated())
                .andReturn()
                .getResponse()
                .getContentAsString();

        AccountResponse account = objectMapper.readValue(createResponse, AccountResponse.class);
        String accountId = account.getAccountId().toString();

        // Test deposit
        TransactionRequest depositRequest = new TransactionRequest(
            new BigDecimal("200.00"),
            "Test deposit"
        );

        mockMvc.perform(post("/api/accounts/{accountId}/deposit", accountId)
                .header("Authorization", "Bearer " + jwtToken)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(depositRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.type").value("DEPOSIT"))
                .andExpect(jsonPath("$.amount").value(200.00))
                .andExpect(jsonPath("$.balanceAfter").value(700.00))
                .andExpect(jsonPath("$.successful").value(true));

        // Test withdrawal
        TransactionRequest withdrawRequest = new TransactionRequest(
            new BigDecimal("100.00"),
            "Test withdrawal"
        );

        mockMvc.perform(post("/api/accounts/{accountId}/withdraw", accountId)
                .header("Authorization", "Bearer " + jwtToken)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(withdrawRequest)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.type").value("WITHDRAWAL"))
                .andExpect(jsonPath("$.amount").value(100.00))
                .andExpect(jsonPath("$.balanceAfter").value(600.00))
                .andExpect(jsonPath("$.successful").value(true));
    }

    @Test
    void testOverdraftLimitEnforcement() throws Exception {
        // Create account with low balance and overdraft limit
        CreateAccountRequest createRequest = new CreateAccountRequest(
            "Test User",
            new BigDecimal("50.00"),
            new BigDecimal("100.00")
        );

        String createResponse = mockMvc.perform(post("/api/accounts")
                .header("Authorization", "Bearer " + jwtToken)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(createRequest)))
                .andExpect(status().isCreated())
                .andReturn()
                .getResponse()
                .getContentAsString();

        AccountResponse account = objectMapper.readValue(createResponse, AccountResponse.class);
        String accountId = account.getAccountId().toString();

        // Try to withdraw more than balance + overdraft limit
        TransactionRequest excessiveWithdrawRequest = new TransactionRequest(
            new BigDecimal("200.00"), // Exceeds 50 + 100 limit
            "Excessive withdrawal"
        );

        mockMvc.perform(post("/api/accounts/{accountId}/withdraw", accountId)
                .header("Authorization", "Bearer " + jwtToken)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(excessiveWithdrawRequest)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.successful").value(false));
    }

    @Test
    void testGetAccountBalance() throws Exception {
        // Create account
        CreateAccountRequest createRequest = new CreateAccountRequest(
            "Balance Test User",
            new BigDecimal("1000.00"),
            new BigDecimal("0.00")
        );

        String createResponse = mockMvc.perform(post("/api/accounts")
                .header("Authorization", "Bearer " + jwtToken)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(createRequest)))
                .andExpect(status().isCreated())
                .andReturn()
                .getResponse()
                .getContentAsString();

        AccountResponse account = objectMapper.readValue(createResponse, AccountResponse.class);
        String accountId = account.getAccountId().toString();

        // Test balance endpoint
        mockMvc.perform(get("/api/accounts/{accountId}/balance", accountId)
                .header("Authorization", "Bearer " + jwtToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.accountId").value(accountId))
                .andExpect(jsonPath("$.balance").value(1000.00));
    }

    @Test
    void testUnauthorizedAccess() throws Exception {
        // Test without token
        mockMvc.perform(get("/api/accounts"))
                .andExpect(status().isUnauthorized());

        // Test with invalid token
        mockMvc.perform(get("/api/accounts")
                .header("Authorization", "Bearer invalid-token"))
                .andExpect(status().isUnauthorized());
    }

    @Test
    void testGetAllAccounts() throws Exception {
        mockMvc.perform(get("/api/accounts")
                .header("Authorization", "Bearer " + jwtToken))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").isArray());
    }
}